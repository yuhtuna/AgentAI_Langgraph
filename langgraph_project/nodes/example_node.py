from langchain_core.messages import SystemMessage, HumanMessage
from ..llm_config import llm
from ..state import AgentState
from ..tools import search_tool
import json
import pprint


def planner_node(state: AgentState):
    """
    This node acts as the "Manager". It takes the initial user task
    and creates a plan for the other agents to follow.
    """
    print("---PLANNING---")
    messages = [
        SystemMessage(content="You are an expert project planner. Create a simple, step-by-step plan to accomplish the user's task. Your plan should be clear and concise."),
        HumanMessage(content=state['task'])
    ]
    response = llm.invoke(messages)
    return {"plan": response.content}


def researcher_node(state: AgentState):
    """
    This node acts as the "Researcher". It takes the plan, researches the topic,
    and generates a search query.
    """
    print("---RESEARCHING---")
    messages = [
        SystemMessage(content="You are a world-class researcher. Based on the following plan, generate a single, concise search query to find the most relevant information. The query should be specific and under 100 characters. Your response must be ONLY the search query string, with no extra text or explanation."),
        HumanMessage(content=state['plan'])
    ]
    response = llm.invoke(messages)
    # The response from the LLM is a search query. We'll pass this to the search_node.
    return {"messages": [response]}


def search_node(state: AgentState):
    """
    This node performs the web search using the query generated by the researcher.
    """
    print("---SEARCHING---")
    query = state['messages'][-1].content
    search_results = search_tool.invoke(query)
    return {"search_results": search_results}


def writer_node(state: AgentState):
    """
    This node acts as the "Writer". It takes the plan and the search results
    and writes the final report.
    """
    print("---WRITING---")
    # Combine the plan and search results to provide context to the writer LLM
    context = f"Task: {state['task']}\n\nPlan:\n{state['plan']}\n\nSearch Results:\n{pprint.pformat(state['search_results'])}"
    
    messages = [
        SystemMessage(content="You are an expert technical writer. Based on the following task, plan, and research results, write a polished, final report."),
        HumanMessage(content=context)
    ]
    response = llm.invoke(messages)
    return {"review": response.content}
